#include "createwxapp.h"
#include <algorithm>
#include <cctype>
#include <filesystem>
#include <fstream>
#include <iostream>
#include <sstream>
#include <string>

namespace {
    std::string GenerateCMAKE(std::string const &appName) {
        return R"(# generated by create-wx-app
cmake_minimum_required(VERSION 3.0.0)
project()" + appName +
               R"( VERSION 0.0.1)

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

find_package(wxWidgets COMPONENTS core base REQUIRED)

include(${wxWidgets_USE_FILE})

include_directories(include)

add_executable(${PROJECT_NAME} src/application.cpp
                               src/mainframe.cpp)

target_link_libraries(${PROJECT_NAME} ${wxWidgets_LIBRARIES})
)";
    }

    std::string CreateHeaderGuard(std::string const &appName,
                                  std::string const &fileName) {
        std::string appUpper{appName};
        std::for_each(appUpper.begin(), appUpper.end(), [](char &ch) {
            ch = std::toupper(ch);
        });

        std::string fileUpper{fileName};
        std::for_each(fileUpper.begin(), fileUpper.end(), [](char &ch) {
            ch = std::toupper(ch);
        });

        return appUpper + "_" + fileUpper + "_H";
    }

    std::string GenerateApplicationHeader(std::string const &appName) {
        std::string headerGuard{CreateHeaderGuard(appName, "application")};
        return "#ifndef " + headerGuard + "\n#define " + headerGuard + R"(

#include <wx/app.h>

class Application : public wxApp {
    virtual bool OnInit();
};

#endif
)";
    }

    std::string GenerateMainFrameHeader(std::string const &appName) {
        std::string headerGuard{CreateHeaderGuard(appName, "mainframe")};
        return "#ifndef " + headerGuard + "\n#define " + headerGuard + R"(

#include <wx/frame.h>

class MainFrame : public wxFrame {
public:
    MainFrame();
};

#endif
)";
    }

    std::string GenerateApplicationSource() {
        return R"(// Generated by create-wx-app
#include "application.h"
#include "mainframe.h"

bool Application::OnInit() {
    if(!wxApp::OnInit()) {
        return false;

    }

    auto mainFrame = new MainFrame();
    mainFrame->Show();

    return true;
}

wxIMPLEMENT_APP(Application);
)";
    }

    std::string GenerateMainFrameSource() {
        return R"(// Generated by create-wx-app
#include "mainframe.h"

MainFrame::MainFrame()
    : wxFrame(nullptr,
              wxID_ANY,
              "Hello World",
              wxDefaultPosition,
              wxSize(800, 600)) {
    //
}
)";
    }

} // namespace

bool MkDir(std::string const &path) {
    std::cout << "> Creating directory" << path << '\n';

    bool result = std::filesystem::create_directory(path);
    if (!result) {
        return false;
    }
    std::cout << "> Done creating directory" << path << '\n';
    return true;
}

bool GenerateCMAKEFile(std::string const &projectPath, std::string const &appName) {
    std::cout << "\n> Creating file CMakeLists.txt...\n";

    std::ofstream cmakeFile(projectPath + "/CMakeLists.txt");
    if (!cmakeFile) {
        return false;
    }

    cmakeFile << GenerateCMAKE(appName);
    cmakeFile.close();

    std::cout << "> Done Creating file CMakeLists.txt\n";
    return true;
}

bool GenerateHeaderFiles(std::string const &projectPath, std::string const &appName) {
    std::cout << "> Generating /include/application.h\n";
    std::ofstream applicationHeader(projectPath + "/include/application.h");
    if (!applicationHeader) {
        return false;
    }
    applicationHeader << GenerateApplicationHeader(appName);
    std::cout << "> Done generating /include/application.h\n";

    std::cout << "> Generating /include/mainframe.h\n";
    std::ofstream mainFrameHeader(projectPath + "/include/mainframe.h");
    if (!mainFrameHeader) {
        return false;
    }
    mainFrameHeader << GenerateMainFrameHeader(appName);
    std::cout << "> Done generating /include/application.h\n";

    return true;
}

bool GenerateSourceFiles(std::string const &projectPath, std::string const &appName) {
    std::cout << "> Generating /src/application.cpp\n";
    std::ofstream applicationSource(projectPath + "/src/application.cpp");
    if (!applicationSource) {
        return false;
    }
    applicationSource << GenerateApplicationSource();
    std::cout << "> Done generating /src/application.cpp\n";

    std::cout << "> Generating /src/mainframe.cpp\n";
    std::ofstream mainFrameSource(projectPath + "/src/mainframe.cpp");
    if (!mainFrameSource) {
        return false;
    }
    mainFrameSource << GenerateMainFrameSource();
    std::cout << "> Done generating /src/mainframe.cpp\n";

    return true;
}
