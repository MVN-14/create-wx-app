#include "createwxapp.h"
#include <algorithm>
#include <cctype>
#include <filesystem>
#include <fstream>
#include <iostream>
#include <sstream>
#include <string>

namespace {
    std::string GenerateCMAKE(std::string const &appName) {
        return R"(# generated by create-wx-app
cmake_minimum_required(VERSION 3.0.0)
project()" + appName +
               R"( VERSION 0.0.1)

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

find_package(wxWidgets COMPONENTS core base REQUIRED)

include(${wxWidgets_USE_FILE})

include_directories(include)

add_executable(${PROJECT_NAME} src/application.cpp)

target_link_libraries(${PROJECT_NAME} ${wxWidgets_LIBRARIES})
)";
    }

    std::string CreateHeaderGuard(std::string const &appName) {
        std::stringstream guard;
        std::for_each(appName.cbegin(), appName.cend(), [&guard](char &ch) {
            guard << std::toupper(ch);
        });

        guard << "_H";
        return guard.str();
    }

    std::string GenerateApplicationHeader(std::string const &appName) {
        std::string headerGuard{CreateHeaderGuard(appName)};
        return "#ifndef " + headerGuard + "\n#define " + headerGuard + R"(

#include <wx/app.h>

class Application : public wxApp {
    virtual bool OnInit();
};

#endif
)";
    }

    std::string GenerateMainFrameHeader(std::string const &appName) {
        std::string headerGuard{CreateHeaderGuard(appName)};
        return "#ifndef " + headerGuard + "\n#define " + headerGuard + R"(

#include <wx/frame.h>

class MainFrame : public wxFrame {
public:
    MainFrame();
};

#endif
)";
    }

} // namespace

bool MkDir(std::string const &path) {
    std::cout << "> Creating directory" << path << '\n';

    bool result = std::filesystem::create_directory(path);
    if (!result) {
        return false;
    }
    std::cout << "> Done creating directory" << path << '\n';
    return true;
}

bool GenerateCMAKEFile(std::string const &projectPath, std::string const &appName) {
    std::cout << "\nCreating file CMakeLists.txt...\n";

    std::ofstream cmakeFile(projectPath + "/CMakeLists.txt");
    if (!cmakeFile) {
        return false;
    }

    cmakeFile << GenerateCMAKE(appName);
    cmakeFile.close();

    std::cout << "Done Creating file CMakeLists.txt\n";
    return true;
}

bool GenerateHeaderFiles(std::string const &projectPath, std::string const &appName) {
    std::ofstream applicationHeader(projectPath + "/include");
    if (!applicationHeader) {
        return false;
    }
    applicationHeader << GenerateApplicationHeader(appName);

    std::ofstream mainFrameHeader(projectPath + "/include");
    if (!mainFrameHeader) {
        return false;
    }
    mainFrameHeader << GenerateMainFrameHeader(appName);

    return true;
}
